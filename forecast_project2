import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
import base64

# Set page configuration
st.set_page_config(page_title="Forecasting & Workforce Calculator", layout="wide")

# Define Tabs
tab1, tab2 = st.tabs(["üìä Forecasting Tool", "üßÆ Workforce Calculator"])

### üìä TAB 1: FORECASTING TOOL ###
with tab1:
    st.title("Forecasting Tool with Channel Analysis")

    # Sidebar: Definitions and User Guide
    st.sidebar.header("Definitions (Forecasting tool)")
    st.sidebar.markdown("""
    - **Forecasting:** The process of predicting future values based on historical data.
    - **MAE (Mean Absolute Error):** Measures the average magnitude of errors in a set of forecasts.
    - **RMSE (Root Mean Squared Error):** A standard way to measure the error of a model in predicting quantitative data.
    - **ARIMA (AutoRegressive Integrated Moving Average):** A statistical model used for time-series analysis and forecasting.
    - **Holt-Winters:** A method that uses exponential smoothing to forecast data with a trend and seasonality.
    - **Prophet:** A forecasting procedure designed for time series data.
    """)

    st.sidebar.header("User Guide")
    st.sidebar.markdown("""
    1. **Upload Data:** Upload your own dataset. Ensure it has `Date`, `Volume`, `LOB`, and `Channel` columns.
    2. **Forecasting Levels:** Daily (Mon-Sun), Weekly (Week 1, 2, ...), Monthly (Jan-Dec).
    3. **Forecast Data:** Filter forecasted results by Channel and download the forecast as a CSV file.
    """)

    # Upload dataset
    uploaded_file = st.file_uploader("Upload your data (CSV or Excel)", type=["csv", "xlsx"])

    if uploaded_file:
        try:
            if uploaded_file.name.endswith(".csv"):
                data = pd.read_csv(uploaded_file, parse_dates=["Date"], dayfirst=True)
            elif uploaded_file.name.endswith(".xlsx"):
                import openpyxl  # Ensure openpyxl is installed

                data = pd.read_excel(uploaded_file, engine="openpyxl")

            data.columns = map(str.lower, data.columns)
            data["date"] = pd.to_datetime(data["date"], errors="coerce")

            if data["date"].isnull().any():
                st.error("‚ö†Ô∏è Some date values couldn't be parsed. Please check your file format.")
        except Exception as e:
            st.error(f"Error processing uploaded data: {e}")
            data = pd.DataFrame()
    else:
        st.warning("Please upload a dataset to proceed.")
        data = pd.DataFrame()

    required_columns = ["date", "volume", "lob", "channel"]
    if not data.empty and not all(col in data.columns for col in required_columns):
        st.error(f"Uploaded data must contain the following columns: {', '.join(required_columns)}")
        data = pd.DataFrame()

    if not data.empty:
        st.write("**Dataset Preview:**")
        st.write(data.head())

        # Filter by Channel
        unique_channels = data["channel"].unique()
        selected_channel = st.selectbox("Select Channel:", unique_channels)
        data = data[data["channel"] == selected_channel]


        # Forecasting function
        def forecast_with_methods(data, frequency):
            data = data.groupby(pd.Grouper(key="date", freq=frequency))["volume"].sum().reset_index()
            results = {}
            forecast_data = pd.DataFrame()

            try:
                arima_model = ARIMA(data["volume"], order=(5, 1, 0)).fit()
                arima_forecast = arima_model.forecast(steps=12)
                results["ARIMA"] = {
                    "forecast": arima_forecast,
                    "MAE": mean_absolute_error(data["volume"], arima_model.fittedvalues),
                    "RMSE": np.sqrt(mean_squared_error(data["volume"], arima_model.fittedvalues)),
                }
                forecast_data["Date"] = pd.date_range(start=data["date"].iloc[-1], periods=12, freq=frequency)
                forecast_data["ARIMA"] = arima_forecast.values
            except Exception as e:
                st.warning(f"ARIMA failed: {e}")

            try:
                hw_model = ExponentialSmoothing(data["volume"], seasonal="add", seasonal_periods=4).fit()
                hw_forecast = hw_model.forecast(12)
                results["Holt-Winters"] = {
                    "forecast": hw_forecast,
                    "MAE": mean_absolute_error(data["volume"], hw_model.fittedvalues),
                    "RMSE": np.sqrt(mean_squared_error(data["volume"], hw_model.fittedvalues)),
                }
                forecast_data["Holt-Winters"] = hw_forecast.values
            except Exception as e:
                st.warning(f"Holt-Winters failed: {e}")

            return results, forecast_data


        frequency_map = {"Daily": "D", "Weekly": "W-MON", "Monthly": "M"}
        level = st.selectbox("Choose Forecasting Level:", list(frequency_map.keys()))
        results, forecast_data = forecast_with_methods(data, frequency_map[level])

        st.write("**Forecasted Data Table:**")
        st.dataframe(forecast_data)

        # Download button for displayed data
        csv = forecast_data.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="forecasted_data.csv">Download Forecasted Data</a>'
        st.markdown(href, unsafe_allow_html=True)

        # Show Error Comparison Table
        error_table = pd.DataFrame(results).T[["MAE", "RMSE"]]
        st.write("**üìä Model Error Comparison (Lower is Better):**")
        st.dataframe(error_table)
